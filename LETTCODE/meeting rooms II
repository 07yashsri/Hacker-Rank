#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int minMeetingRooms(vector<vector<int>>& intervals) {
    if (intervals.empty()) return 0;

    // Sort the meetings by start time
    sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
        return a[0] < b[0];
    });

    // Min-heap to track the end time of meetings
    priority_queue<int, vector<int>, greater<int>> minHeap;

    // Add the end time of the first meeting
    minHeap.push(intervals[0][1]);

    for (int i = 1; i < intervals.size(); ++i) {
        // If the room is free (i.e., the earliest ending meeting ends before the current meeting starts)
        if (intervals[i][0] >= minHeap.top()) {
            minHeap.pop(); // Free up a room
        }

        // Allocate a new room (or reuse freed one by pushing current end time)
        minHeap.push(intervals[i][1]);
    }

    // The size of the heap tells us the minimum rooms required
    return minHeap.size();
}

int main() {
    vector<vector<int>> intervals = {{0, 30}, {5, 10}, {15, 20}};
    cout << "Minimum number of meeting rooms required: " << minMeetingRooms(intervals) << endl;
    return 0;
}
