#include <iostream>
#include <vector>
#include <deque>
#include <climits>
using namespace std;

// User-defined function (not in a class)
int shortestSubarrayWithSumAtLeastK(vector<int>& nums, int k) {
    int n = nums.size();
    vector<long long> prefix(n + 1, 0);

    // Compute prefix sums
    for (int i = 1; i <= n; i++) {
        prefix[i] = prefix[i - 1] + nums[i - 1];
    }

    deque<int> dq;
    int minLen = n + 1;

    for (int i = 0; i <= n; i++) {
        // Try to shorten the subarray while the sum condition is satisfied
        while (!dq.empty() && prefix[i] - prefix[dq.front()] >= k) {
            minLen = min(minLen, i - dq.front());
            dq.pop_front();
        }

        // Maintain increasing order of prefix sums in deque
        while (!dq.empty() && prefix[i] <= prefix[dq.back()]) {
            dq.pop_back();
        }

        dq.push_back(i);
    }

    return (minLen == n + 1) ? -1 : minLen;
}

// Example usage
int main() {
    vector<int> nums = {2, -1, 2};
    int k = 3;

    int result = shortestSubarrayWithSumAtLeastK(nums, k);
    cout << "Length of shortest subarray: " << result << endl;

    return 0;
}
