#include <iostream>
#include <algorithm>
using namespace std;

// Tree node structure
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Helper function to compute depth and update diameter
int depth(TreeNode* node, int& diameter) {
    if (!node) return 0;

    int leftDepth = depth(node->left, diameter);
    int rightDepth = depth(node->right, diameter);

    // Update the diameter (path through current node)
    diameter = max(diameter, leftDepth + rightDepth);

    // Return height of current node
    return max(leftDepth, rightDepth) + 1;
}

// User-defined function to compute diameter of binary tree
int diameterOfBinaryTree(TreeNode* root) {
    int diameter = 0;
    depth(root, diameter);
    return diameter;
}

// Example usage
int main() {
    // Building the tree: [1, 2, 3, 4, 5]
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    int result = diameterOfBinaryTree(root);
    cout << "Diameter of the binary tree: " << result << endl;

    return 0;
}
