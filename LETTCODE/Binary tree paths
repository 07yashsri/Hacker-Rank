#include <iostream>
#include <vector>
#include <string>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Helper DFS function to build all root-to-leaf paths
void dfs(TreeNode* node, string path, vector<string>& result) {
    if (!node) return;

    // Append current node value to path
    if (!path.empty()) {
        path += "->";
    }
    path += to_string(node->val);

  
    if (!node->left && !node->right) {
        result.push_back(path);
        return;
    }

  
    dfs(node->left, path, result);
    dfs(node->right, path, result);
}


vector<string> binaryTreePaths(TreeNode* root) {
    vector<string> result;
    dfs(root, "", result);
    return result;
}


int main() {
    /*
        Tree structure:
              1
             / \
            2   3
             \
              5
        Expected paths: ["1->2->5", "1->3"]
    */

    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(5);

    vector<string> paths = binaryTreePaths(root);
    cout << "Binary Tree Paths:\n";
    for (const string& path : paths) {
        cout << path << endl;
    }

    return 0;
}
