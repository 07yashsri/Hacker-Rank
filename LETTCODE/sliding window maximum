#include <iostream>
#include <vector>
#include <deque>

using namespace std;

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq; 
        vector<int> result;

        for (int i = 0; i < nums.size(); ++i) {
         
            if (!dq.empty() && dq.front() <= i - k)
                dq.pop_front();

       
            while (!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();

            // Add current index
            dq.push_back(i);

            // Add to result if window is fully seen
            if (i >= k - 1)
                result.push_back(nums[dq.front()]);
        }

        return result;
    }
};

int main() {
    vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};
    int k = 3;

    Solution sol;
    vector<int> output = sol.maxSlidingWindow(nums, k);

    cout << "Sliding Window Maximums: ";
    for (int num : output) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
