#include <iostream>
using namespace std;


struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

int rangeSumBST(TreeNode* root, int L, int R) {
    if (!root) return 0;  // If root is null, no sum to add

    int sum = 0;

  
    if (root->val >= L && root->val <= R) {
        sum += root->val;
    }

    if (root->val > L) {
        sum += rangeSumBST(root->left, L, R);
    }


    if (root->val < R) {
        sum += rangeSumBST(root->right, L, R);
    }

    return sum;
}


int main() {
    /*
        Tree: [10, 5, 15, 3, 7, null, 18]
              10
             /  \
            5    15
           / \     \
          3   7    18

        Range: [7, 15]
        Expected output: 32 (7 + 10 + 15)
    */

    TreeNode* root = new TreeNode(10);
    root->left = new TreeNode(5);
    root->right = new TreeNode(15);
    root->left->left = new TreeNode(3);
    root->left->right = new TreeNode(7);
    root->right->right = new TreeNode(18);

    int L = 7, R = 15;
    int result = rangeSumBST(root, L, R);

    cout << "Range sum of BST between " << L << " and " << R << ": " << result << endl;

    return 0;
}
