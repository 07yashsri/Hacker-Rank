#include <iostream>
#include <vector>
#include <queue>
using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

vector<int> rightSideView(TreeNode* root) {
    vector<int> result;
    if (!root) return result;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size();
        TreeNode* rightmost = nullptr;

        for (int i = 0; i < levelSize; ++i) {
            TreeNode* node = q.front(); q.pop();
            rightmost = node;

            if (node->left) q.push(node->left);
            if (node->right) q.push(node->right);
        }

        if (rightmost) result.push_back(rightmost->val);
    }

    return result;
}


int main() {
    // Creating a sample binary tree:
    //     1
    //    / \
    //   2   3
    //    \   \
    //     5   4
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(5);
    root->right->right = new TreeNode(4);

    vector<int> view = rightSideView(root);
    cout << "Right Side View: ";
    for (int val : view) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
