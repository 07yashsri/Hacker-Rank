struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        vector<int> datas;
        
        // Collect all values from the lists
        for (ListNode* i : lists) {
            while (i) {
                datas.push_back(i->val);
                i = i->next;
            }
        }

        // Sort all values
        sort(datas.begin(), datas.end());

        // Create new merged list
        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy;
        for (int j : datas) {
            temp->next = new ListNode(j);
            temp = temp->next;
        }

        return dummy->next;
    }
};

// Utility function to create a linked list from a vector
ListNode* createList(const vector<int>& values) {
    ListNode* dummy = new ListNode(-1);
    ListNode* current = dummy;
    for (int val : values) {
        current->next = new ListNode(val);
        current = current->next;
    }
    return dummy->next;
}

// Utility function to print a linked list
void printList(ListNode* head) {
    while (head) {
        cout << head->val;
        if (head->next) cout << " -> ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    // Create example input: 3 sorted linked lists
    vector<ListNode*> lists;
    lists.push_back(createList({1, 4, 5}));
    lists.push_back(createList({1, 3, 4}));
    lists.push_back(createList({2, 6}));

    // Merge k sorted lists
    Solution sol;
    ListNode* merged = sol.mergeKLists(lists);

    // Print the result
    cout << "Merged Linked List: ";
    printList(merged);

    return 0;
}
