#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> getKSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
    using pii = pair<int, pair<int, int>>;
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    vector<vector<int>> ans;
    
    int n = nums1.size(), m = nums2.size();
    if (n == 0 || m == 0 || k == 0) return ans;

    for (int i = 0; i < min(n, k); ++i) {
        pq.push({nums1[i] + nums2[0], {i, 0}});
    }

    while (!pq.empty() && k--) {
        auto tp = pq.top(); pq.pop();
        int x = tp.second.first, y = tp.second.second;
        ans.push_back({nums1[x], nums2[y]});
        if (y + 1 < m) {
            pq.push({nums1[x] + nums2[y + 1], {x, y + 1}});
        }
    }

    return ans;
}

// Example usage:
int main() {
    vector<int> nums1 = {1, 7, 11};
    vector<int> nums2 = {2, 4, 6};
    int k = 3;

    vector<vector<int>> result = getKSmallestPairs(nums1, nums2, k);
    for (const auto& pair : result) {
        cout << "[" << pair[0] << ", " << pair[1] << "] ";
    }
    return 0;
}
