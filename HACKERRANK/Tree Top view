#include <iostream>
#include <queue>
#include <map>

using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int d) : data(d), left(nullptr), right(nullptr) {}
};

void topView(Node* root) {
    if (!root) return;

    map<int, int> topNodes;
    queue<pair<Node*, int>> q;
    q.push({root, 0});

    while (!q.empty()) {
        Node* node = q.front().first;
        int hd = q.front().second;
        q.pop();

        if (topNodes.find(hd) == topNodes.end()) {
            topNodes[hd] = node->data;
        }

        if (node->left) {
            q.push({node->left, hd - 1});
        }
        if (node->right) {
            q.push({node->right, hd + 1});
        }
    }

    for (auto const& pair : topNodes) {
        cout << pair.second << " ";
    }
    cout << endl;
}

int main() {
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->right = new Node(4);
    root->left->right->right = new Node(5);
    root->left->right->right->right = new Node(6);

    topView(root); 

    return 0;
}
